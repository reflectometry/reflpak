if { [llength [info var ::app_version]] > 0 } {
    set about_version $::app_version
} else {
    set about_version "Reflfit [clock format [clock seconds] -format %Y%m%d]"
}
hpage About {} [string map [list %V $about_version] {
%V

 NIST Center for Neutron Research
 Gaithersburg, MD

Please send suggestions and bugs to reflectometry_software@nist.gov

Except where stated in the individual files, this software
is a work of the government and is in the public domain (see [disclaimer]).

The source release includes the following packages:

 ctext.tcl by George Peter Staplin
 htext.tcl by Richard Suchenwirth
 balloonhelp.tcl by Jeffery Hobbs
 sizer.tcl by Kai Morich

Binary releases include the following additional packages:

 Tcl/Tk by John Ousterhout, et al.,
 DQkit by Wojciech Kocjan (based on Jean-Claude Wippler's starkit)
 BLT by George Howlett, et al.,
 Tktable by Jeffrey Hobbs
 Tkdnd by George Petasis, et al.,
 tkcon by Jeffrey Hobbs, et al.,
 BWidget by Eric Boudaillier, et al. now maintained by Jeffrey Hobbs

Paul Kienzle 2004-03-22
}]

hpage disclaimer {} {
This software was developed at the National Institute of Standards and
Technology at the NIST Center for Neutron Research by employees of the
Federal Government in the course of their official duties. Pursuant
to title 17 section 105* of the United States Code this software is
not subject to copyright protection and is in the public domain. The
reflfit software package is an experimental neutron reflectometry analysis
system. NIST assumes no responsibility whatsoever for its use, and makes
no guarantees, expressed or implied, about its quality, reliability, or
any other characteristic. The use of certain trade names or commercial
products does not imply any endorsement of a particular product, nor does
it imply that the named product is necessarily the best product for the
stated purpose. We would appreciate acknowledgment if the software is used.

*Subject matter of copyright: United States Government works

Copyright protection under this title is not available for any work of the
United States Government, but the United States Government is not precluded
from receiving and holding copyrights transferred to it by assignment,
bequest, or otherwise.  
}

# ===============================================================
hpage introduction . {
This program fits reflectivity data to a [layer model] of your sample.
If started as reflfit, the data is from an unpolarized source.  If
started as reflpol, the data is from a polarized source with ABCD
cross sections.

When you start the program, you can either specify a data file or
a previous fit file on the command line, or you can select a data
file/command file from the current directory.
For polarized data with a,b,c,d cross sections, select one
of the cross sections and the program will find the others.  Use the
[gj2] ps command to restrict the subset which you are working with.

The main application window consists of a [reflectivity] graph and
a notebook of control panels.  Your first stop should be the
[beam characteristics] to set the appropriate wavelength for your 
reflectivity data.  Next you will need the [layer menu] to set the 
initial layers for your sample.  Once you have the right number 
of layers, you can
either modify the parameters directly from the [layer table] or
interactively from [profile] graph.  For complicated samples, you
may have [constraints] between your layers.  Once you have your
system set up, you will spend a lot of time using [fit], changing
your parameters and fitting again.  This program is a work in progress.
Some features are only available in the underlying [gj2]/[mlayer]
programs, or from the [Tcl console].

2003-01-17}

# ===============================================================
hpage reflectivity {} {
The reflectivity graph displays the data as well as the theoretical
reflectivity curve computed from the layer profile of the sample.

Click the items in the legend to select/deselect them.

Shift-right-click to print the reflectivity theory and data.

Use the [gj2] ps command to restrict the fit to specific cross sections.

2003-01-17}

# ===============================================================
if {![info exists ::layerbox]} { set ::layerbox {} }
hpage profile $::layerbox {The profile graph shows the cross-section
of your sample from the top at 0 down to the substrate.

Scattering length density is displayed as the line qcsq.  Absorption
is displayed as mu.  For reflpol, the magnetic scattering length
density is displayed as mqcsq and the direction as theta.  Clicking
any of these entries in the legend will toggle the line on the graph.

You can add and delete layers from the [layer menu].  Layer parameters
can be entered in the [layer table], or you can graphically manipulate 
the profile by clicking and dragging on the layer interfaces (dashed 
lines) and control points (colored squares).  Press Escape to restore 
the parameter to its original value.  Press the arrow keys to move
by a single pixel, or Control+Arrow to move by 1/5 of a pixel.

Dragging the control points up and down changes the value for the
layer, right and left controls the roughness for the layer.  Press 
Shift while dragging to change both simultaneously.

The roughness algorithm is fraught with problems.  Consult the
[roughness] supplement for the nitty-gritty details.  Quick summary: 
make sure D's are twice as big as R's.  Also, avoid the tanh model: 
for small roughness, RO is the half-width at one-third maximum; 
for large roughness, RO is the full-width at one-third maximum.

Pressing Shift while dragging a layer interface will move the 
interface between two layers rather than changing the depth of one 
layer.  Pressing Shift+Arrow will move the layer interface one
pixel at a time.  Note that reflpol has two sets of interfaces: one 
for magnetic layers and one for physical layers, labelled 
M# and N# respectively.

The resolution convolution is performed using only the q points found
in the data files.  Extremely thick layers will produce rapidly
oscillating reflectivity which will not be convolved correctly.  The
actual limit is specific to the geometry of the experiment and
sample.  Rough guidelines for maximum film thickness are 500 nm for
x-rays and 200 nm for neutrons.

The [print] button on the bottom of the page sends the profile graph to
the printer.  Shift-right-click on the reflectivity graph to print
that.

The rescale button changes the axes so that the entire profile is
displayed along with some room to resize the profile.

2003-01-17}

# ===============================================================
hpage print {.layers.print .reflectivity.print} {
Print options for your graph.  Which graph gets printed depends how
you got here.  To print the data/theory, shift-right-click on the
reflectivity graph.  To print the profile  click the Print button on
the profile screen.  There is no support for printing the layer table,
the constraints or fit parameters.

The options on the left define the graph:

>center centers the graph

>landscape selects between portrait and landscape mode

>maxpect preserves the aspect ratio of the graph

>preview generates a preview in the postscript file which 
programs such as xdvi can use to display the graph

>decorations determines the color of the graph border

>colormode should be color for a color printer.  Support 
for black and white printers is weak --- there is no 
attempt to use different dash patterns for the lines.

The options on the right define the paper.  The defaults
work for 8 1/2 x 11 paper.

Output can either be to a postscript file or directly to the printer.
If it is directly to a printer, use "|lpr -P<printer>".  Consult your
local contact regarding the names and locations of the various printers.

2003-01-17}

# ===============================================================
hpage {layer menu} .#menu.#menu#layer {Reflfit and reflpol model
your sample as a sequence of layers.  Reflfit organizes the layers
into sections T=Top, M=Middle and B=Bottom, where the middle layer
can repeat.  Layers are identified by section and layer number.

   Insert    insert a new layer
   Delete    delete an existing layer, shifting all subsequent layers
   Copy      duplicate a layer and insert it somewhere else
   Move	     move a layer somewhere else
   Overwrite like copy, but replace the destination

   Repeat    number of repeats for middle section (reflfit only)

Due to the way the middle layers get repeated, the NR parameter
should generally be two less than the actual number of repeats.
One repeat should be explicitly described at the bottom of the
top layers and one repeat explicitly described at the top of the
bottom layers.  Minimally, the bottom most top layer should be
identical to the bottom most middle layer and the top most
bottom layer should be identical to the top most middle layer.

   Roughness number of roughness steps for the interface

Use a small number of roughness steps for quick calculation during
initial fits.  Use a larger number to refine the fit.	

[gj2] does not support repeating layers, but it does have a command
for duplicating a set of layers a number of times.

2003-01-17}

# ===============================================================
hpage {file menu} .#menu.#menu#file {

New starts a new profile from data.  Select the name of a data file
to fit.  For polarized data with a,b,c,d cross sections, select one
of the cross sections and the program will find the others.  Use the
[gj2] ps command to restrict the subset which you are working with.

Open changes to an existing fit file.

Save/Save as saves the fit file.  Save frequently as different names
when you start to get good fits.

Data selects a new data set to fit, using the current layer profile.
There is no support for fitting multiple profiles simultaneously.

Export saves the reflectivity profile or layer profile.  This is
not presently implemented.  Use the appropriate [gj2]/[mlayer]
command for now.

Save and exit/Quit without saving exits the program.

2003-01-17}

# ===============================================================
hpage {options menu} .#menu.#menu#options {
[Tcl console] starts the Tcl console so you can interact directly 
with the application.

Spy on mlayer lets you watch the interaction between the GUI
front end and the underlying [gj2]/[mlayer] program.
}

# ===============================================================
hpage {layer model} {} {This help describes both reflfit and reflpol,
but the models in the two programs are different.

Both models produce a set of slabs

Reflfit uses a three section model of the sample, with the middle 
section repeated one or more times. Each section is broken into
a set of layers, with up to nine layers allowed per section.

XXX FIXME XXX incomplete!
}

# ===============================================================
if {![info exists ::tablebox]} { set ::tablebox {} }
hpage {layer table} $::tablebox {The layer table allows you to
directly enter parameter values for the [layer model].  You can instead
manipulate the [profile] graphically.

Click on a cell to edit the value.  Press Escape to restore the
value to how it was before you started editting.  Press the up
and down arrows to go up and down the rows, or tab and backtab
to change between columns.  

Copy and paste should work in the cells using your usual copy 
and paste keys.  Alternatively, you can also enter the name of a 
parameter.  E.g., qc1 for the the Qc^2 value from layer 1.  In
reflfit, you will need to prepend this with the section t, m or b.

2003-01-17}

# ===============================================================
if {![info exists ::fitbox]} { set ::fitbox {} }
hpage fit $::fitbox {Select which parameters, click Fit and wait.

The fit does a gradient descent search through the fit parameter
space using a Levensburg-Marquardt non-linear least squares update
procedure.  Each step of the fit it updates the new table parameters,
profile and reflectivity curve.  At the end of the fit it estimates
the uncertainty in each parameter.

You can click Stop, and at the end of the next update cycle the
fit will terminate with the current parameters.  Click Revert to
restore the parameters to what they were before the Fit.  Save your
parameter sets frequently with >File >Save As....

Fit parameters are selected with the mouse.  Click and drag to select
a block of parameters.  Press Ctrl before selecting if you want to add
parameters to the selection.  If you are using [constraints] you may
need extra parameters which are not part of your layer structure.  Any
parameter not used in the layer table is available.  \[MLayer uses 
the layer after the last layer in the top and middle regions for its
own purposes, so don't use those.\]

At present there is no way to save the parameter values or their
uncertainties other than selecting and pasting them into an editor.

2003-01-17}

# ===============================================================
if {![info exists ::constraintbox]} { set ::constraintbox {} }
hpage constraints $::constraintbox {Constraits allow you to automatically
update parameters during your fit.  Constraints can be simple, such as
restricting a layer depth to a particular range, or complex, tying the
value of one layer to another.

The change the constraints simply edit the code in the constraints
window.  This will make the Update button available.  Pressing Update
compiles the new constraints.  If there is an error, a window will
appear containing the text of the error on the top and the constraints
program on the bottom.  The line numbers in the error message
should correspond to the line numbers in the constraints window.  Pressing
Show program displays the constraints program even if there were no errors.

Pressing Apply applies the constraints to the current layer profile.
They are applied automatically during fits.

The [constraints syntax] is a variation on C syntax.  In the current
implementation constraints are converted to Tcl for processing.  If
for some reason you need more than the simple looping constructs and math
functions available you can program [Tcl constraints] directly.
In any case, no checks are done that the constraint code is correct, 
so be careful!

Constraints may be suspended with the [gj2]/[mlayer] command ULC.  They 
are restored with the command LC, or by modifying the constraints and 
clicking Update.

2004-05-18}

hpage {Tcl constraints} {} {At present constraints are interpreted as 
Tcl code.  This may change in future to Python or whatever implementation 
language we are using, so if you are programming Tcl constraints directly,
be prepared to update your constraints as program versions change.  You
should probably be using [constraints syntax] instead.

The usual Tcl syntax applies to constraints.

    # comment
    set VAR \[expr {EXPRESSION}]
    if { EXPRESSION } {
        STATEMENTS
    } else {
        STATEMENTS
    }
    foreach VAR { LIST } {
        STATEMENTS
    }
    while { EXPRESSION } {
        STATEMENTS
    }

We define a function \[range 1 $n] which returns a list of numbers
from one to n.  This is useful when operating on every layer.

Layer parameters are referenced using:

    gmlayer set PAR VALUE

If no VALUE is given, the layer parameter PAR is
returned, otherwise the layer parameter PAR is
updated with VALUE and VALUE is returned.

The following are valid parameters for reflfit:

    ntl - number of top layers
    nml - number of middle layers
    nbl - number of bottom layers
    nmr - number of repeats
    bk  - background 
    bi  - beam intensity
    to  - theta offset
    vqc - vacuum scattering length density (16 pi N b units)
    tdi troi tmui tqci for i in 1 to 9
    mdi mroi mmui mqci for i in 1 to 9
    bdi broi bmui bqci for i in 1 to 9

The following are valid parameters for reflpol:

    nl  - number of layers
    bk  - background
    bi  - beam intensity
    eps - polarization angle relative to the guide field
    vqc - vacuum scattering length density (16 pi N b units)
    di  roi mui qci for i > 0
    dmi rmi thi qmi for i > 0

Example 1:

    # set depth of layer T2 to be equal to layer M1
    gmlayer set td2 \[gmlayer set md1]

Example 2:

    # set roughness to 1/2 the layer depth for all layers
    foreach i \[range 1 \[gmlayer set ntl]] { 
	gmlayer set tro$i \[expr {\[gmlayer set td$i]/2}]
    }
    foreach i \[range 1 \[gmlayer set nml]] { 
	gmlayer set mro$i \[expr {\[gmlayer set md$i]/2}]
    }
    foreach i \[range 1 \[gmlayer set nbl]] { 
	gmlayer set bro$i \[expr {\[gmlayer set bd$i]/2}]
    }

Example 3:

    # set the total depth of the middle layers to be equal
    # to the total depth of the top layers while preserving
    # the relative depths of the middle layers
    set sumt 0
    foreach i \[range 1 \[gmlayer set ntl]] {
        set sumt \[expr {$sumt + \[gmlayer set td$i]}]
    }
    set summ 0
    foreach i \[range 1 \[gmlayer set nml]] {
        set summ \[expr {$summ + \[gmlayer set md$i]}]
    }
    set scale \[expr {$sumt/$summ}]
    foreach i \[range 1 \[gmlayer set nml]] {
        gmlayer set tm$i \[expr {\[gmlayer set tm$i]*$scale}]
    }

2004-05-18}

hpage {constraints syntax} {The syntax for the constraints is 
based on the C programming language, with a few modifications.  

The following statements are valid:

    /* comment */
    int VAR
    double VAR
    VAR = EXPRESSION
    if ( EXPRESSION ) {
        STATEMENTS
    } else {
        STATEMENTS
    }
    for (VAR=START;VAR<STOP;VAR++) {
        STATEMENTS
    }
    while (EXPRESSION) {
        STATEMENTS
    }

Note the position of the braces.  The opening brace must be on the same
line as the control structure.  If there is only one statement in the
control structure body, you may skip the braces and include it on the
same line as the control structure.  Statements spanning multiple lines
must end every line with a backslash (\\).

The declaration statements (int and double) must precede all other
statements.  Variables beginning with underscore (_) are reserved.

Some macro commands are permitted.  These are useful for commenting
out blocks of code.

    #define MACRO
    #ifdef MACRO
    #else
    #endif


A number of parameter variables are predefined.  The variable names
are given as specified on the fit screen. The layer number for a 
parameter p may be specified indirectly as p(i), where i is an 
integer variable.  Parameters are not case sensitive.

The following are valid parameters for reflfit:

    ntl - number of top layers
    nml - number of middle layers
    nbl - number of bottom layers
    nmr - number of repeats
    bk  - background 
    bi  - beam intensity
    vqc - vacuum scattering length density (16 pi N b units)
    tdi troi tmui tqci for i in 1 to 9
    mdi mroi mmui mqci for i in 1 to 9
    bdi broi bmui bqci for i in 1 to 9

The following are valid parameters for reflpol:

    nl  - number of layers
    bk  - background
    bi  - beam intensity
    vqc - vacuum scattering length density (16 pi N b units)
    di  roi mui qci for i > 0
    dmi rmi thi qmi for i > 0


Example 1:

    /* set depth of layer T2 to be equal to layer M1 */
    td2=md1

Example 2:

    /* set roughness to 1/2 the layer depth for all layers */
    int i
    for(i=1;i<ntl;i++) tro(i) = td(i)/2
    for(i=1;i<nml;i++) mro(i) = md(i)/2
    for(i=1;i<nbl;i++) bro(i) = bd(i)/2

Example 3:

    /* set the total depth of the middle layers to be equal 
     * to the total depth of the top layers while preserving
     * the relative depths of the middle layers
     */
    double sumt=0, summ=0., scale
    int i
    for (i=1; i < ntl; i++) sumt += td(i)
    set summ 0
    for (i=1; i < nml; i++) summ += tm(i)
    scale=sumt/summ
    for (i=1; i < nml; i++) {
	tm(i) = tm(i)*scale
    }

2004-05-18}

# ===============================================================
if {![info exists ::beambox]} { set ::beambox {} }
hpage {beam characteristics} $::beambox { 
Beam intensity should normally be fixed to 1.0, leading to a total
reflectivity of 1.0 at low angles.  If for some reason this is not the case
(e.g., because of an incident medium absorption coefficient not accounted
for during reduction) then you can adjust the beam intensity here.
Beam intensity is also a [fit] parameter, BI.

Background is the expected background count rate, below which all data
is noise.  With sensitivity down to around 1e-7 for the reflectivity
measurements, the default background level of 1e-10 is typical and is
essentially zero.  Background is also a [fit] parameter, BK.

Wavelength in Angstroms is the incident wavelength of the beam.  The beam 
is assumed to be monochromatic.  At the time of writing, the following 
defaults are assumed for the instruments:

	XRAY 1.5416 Angstroms
	NG-1 4.75 Angstroms
	NG-7 4.768 Angstroms
	CG-1 5.0 Angstroms

Wavelength is available in the header of the reflred data file and 
eventually reflfit will be clever enough to read it, but for
now you must enter it yourself.  

Polarization angle is the angle between the laboratory guide field or 
quantization axis and the sample axis of quantization, defined to be 
the z-axis, which is parallel to Q: note that the x-axes of the 
laboratory and sample coordinate systems are taken to be coincident.  
The sense of rotation is the following: it is the angle FROM the sample 
z-axis TO the lab z-axis rotationg CCW about the x-axis as viewed from 
the positive side of the x-axis.  For the lab z-axis to be aligned with 
the positive y-axis of the sample (the usual case), the angle should 
be -90.  This value is only present for magnetic system.

Theta offset is an alignment correction factor.  X-ray instruments in
particular can be difficult to align precisely.  Instead, the offset from
perfect alignment can be determined from the peak of a rocking curve
(in angle, not in Q) and this value can be entered.  The correction
will be applied uniformly to all data points by first transforming them
from Q to angle, applying the correction and transforming back.  Given
this correction, fits should yield the predicted Qc for the sample.
Further adjustments should only be done under the guidance of an
experienced reflectometer who can provide an alternative explanation
of why the data may be shifted.  This value is not yet available for
magnetic systems.
    
Wavelength divergence in Angstroms is the spread of neutron velocities.
It does not vary with Q.  Typical values are characteristic of the 
monochromator at the instrument:

	XRAY 0.005 Angstroms
	NG-1 0.05 Angstroms
	NG-7 0.05 Angstroms
	CG-1 0.05 Angstroms

Angular divergence in radians is the spread of incident neutron angles.
Since angular divergence depends on the collimation, and slits are
typically opened with increasing Q, there is an implicit Q dependence in
the value used.  We currently do not have an algorithm for determining 
angular divergence directly from the slit settings.

After the ideal reflectivity is computed for the layers described in the
[layer table], a convolution is performed to account for resolution of
the instrument.  The convolution uses a gaussian whose full-width at half
maximum (w) is computed from the wavelength (L), the wavelength divergence
(dL) and the angular divergence (dtheta).  At each point Q in your data set,
w is set to

>w = Q * (dL/L + dtheta/theta),  

where theta is computed from the linear approximation 

>theta = L*Q/4/pi.

The convolution at Qj is computed by the normalized sum over i of

>Ri * exp(-(Qj - Qi)**2 / (2 (w / sqrt(8 ln 2))**2)
    
as long as the contribution to the convolution at your measured datapoint
Qi is greater than 0.1%.  To handle the boundary points, the data set
Q values are extended towards positive infinity and towards negative
infinity using the Q-spacing at the appropriate boundary of the data set.

2003-09-22}


# ===============================================================
hpage {Tcl console} .tkcon {Tcl 
is an easy to learn scripting language in which you will eventually be
able to automate your data fitting.  You can access the Tcl console
from the options menu.

I will not attempt to describe tcl here.  See
http://www.msen.com/~clif/TclTutor.html for an interactive tutorial.

At present the analysis is set up to be driven by the GUI, so
although you could automate it, it would be awkward to do so.
For now Tcl console is useful for debugging.

One thing you could do now in the tcl console is program a movie
showing how the reflectivity changes as you move a parameter through
parameter space.  Here we are using gmlayer to set the parameter
in the underlying program directly.  You can see the available parameters
in a table under the [fit] tab.

The following procedure is available from the Tcl console:

  proc movie {field min max frames} {
   set step \[expr ($max - $min)/($frames-1)\]
   for {set i 0} { $i < $frames } { incr i } {
	gmlayer $field $min
	read_profile
	read_reflectivity
	set min \[expr $min + $step\]
   }
  }

You can watch a movie using, for example:

  movie mqc2 0.0003 0.0004 10

or if you are using reflpol,

  movie qc2 0.0003 0.0004 10

Using this technique you can make the path through parameter space
as complex as you want.

For a more complicated example, enter the command "dump chisqplot".  
This command is similar to movie, except it displays a plot of 
chisq each step of the way.  Be warned that both of these examples 
leave the GUI in an inconsistent state, so subsequent manipulation
of the profile or layer table may have surprising results.

With some effort you could cache the profiles and lineshapes for 
each step of the movie in separate blt vectors, then play them back 
quickly by setting the -ydata on each element of the graph to the 
name of the vector containing that frame of the element.  You will
need a timer between each frame otherwise the frames will flash by
too quickly.  Be sure to restore the original -ydata afterward.

You can create movie programs in your own text editor and load them
into the Tcl console using:

	source filename

2003-06-12}

# ===============================================================
hpage roughness {} {
\[Taken directly from the [mlayer]/[gj2] docs.  Refer
to them to understand the commands mentioned herein.\]

Here is a stab at a summary of how the RO parameters in GJ2/MLAYER
affect the programs.  It is a complicated and confusing matter, indeed,
but please bear with me and ask lots of questions about the info.
We all will learn as a result.

The old criteria of "make sure RO(i) < D(i) and RO(i) < D(i+1)" isn't
adequate, because the number of rough layers NRough affects John's
algorithm for roughing the interface.

GJ2/MLAYER now lists a [ztot parameter] on the NRough line.  When you
select the profile with PR, the program creates a standard profile y(x)
(erf or tanh) whose x-axis is a rescaled depth.  The parameter ztot is
a measure of the total thickness of this rescaled depth.  When the
program uses the profile to rough an interface i in your structure, it
scales the x-axis by RO(i).

You cannot modify ztot, except by modifying NRough.  Ztot * RO(1) is
also the extra thickness added to your profile for the vacuum
gradation.  Your nominal structure starts this far deep into the
profile when you run commands like PLP.

We care about ztot because it is part of the criteria used to implement
two different ways of roughing the interface.  For small roughness, the
contribution to QCSQ and MU in the roughed layers comes only from the
layers on either side of the interface.  For large roughness, QCSQ and
MU in the layer depend on the values given for the layer and the one
above and below.  But, with exceedingly large roughness and small
thickness, the contribution from two layers away may be significant.  But
they will never be taken into account, unless you add a layer with
indeterminate QCSQ and MU.

For small roughness, your profile y(x) is divided into NRough + 1
(more or less) equally-spaced segments in y; the thickness of the
microslab varies accordingly (y is equally spaced for tanh).  When
large roughness is in effect, the NRough + 1 microslabs are equally
thick, and the profile y(x) varies accordingly.

The criteria which selects "small" is the following:

   D(i) > ztot * (RO(i) + RO(i+1))

"Large" is that which is not small.

Layers always extend from the middle of interface i to the middle of
interface i + 1.  We can get into problems when layers of dramatically
different roughness are adjacent to layers of dramatically different
thickness.  We could get the situation in which a "small" layer is
adjacent to a "large" layer.  In this case, we can get discontinous
jumps in both the magnitude and the slope of the profile.

Jumps in magnitude occur because a different rescaled x is being used
just at either side of the interface and the number of layers involved
at the interface changes.  Although significant contribution from layer
(i+2) may exist for the interface, the thickness of layer i selects a
"small" roughness model in which (i+2) plays no part.

Be advised that in GJ2 the magnetic and chemical profiles have
logically distinct roughness and thickness parameters.  They are
unified into a structure with common microslabs.  In the course of
doing this unification, a further averaging of the profile takes place
between the neighboring microslabs of the individual magnetic and
chemical profiles.  This may prevent the profile from ever reaching the
saturation value displayed by the VE command.  The error increases as
NRough decreases.  This unification is also the reason why RO(1) must
equal RM(1), otherwise the vacuum gradations will be of different
thickness, and the nominal magnetic structure will start at a different
depth from the nominal chemical structure.

In summary, if you keep D(i) > ztot * (RO(i) + RO(i+1)) for all i, the
small model will always apply, and the resulting profile will be
totally consistent.  As an aside, I have needed to implement linear
gradations through some very thick layers.  I achieved this by dividing
the very thick layer into three or more sublayers and using a tanh
profile in which RO(i) = 1.25 * D(i) for the inner sublayers, putting
us in the "large" roughness regime.  Roughness for the outer sublayers
is reduced to promote a controlled transition between "large" and
"small" models.

2003-01-17}

# ===============================================================
hpage {ztot parameter} {} {
The ztot parameter is derived from the parameters of the "small"
roughness model.  All the small roughness calculations are based on the
tanh profile; the parameters for the erf profile are derived from key
features of the tanh profile.

In this appendix, I'll be speaking of the profile y(x), and I'll use
"vertical" to refer to the y axis and "horizontal" to refer to the x axis
(which is a re-scaled depth into the sample: z = RO(i) * x).

In the tanh model, the vertical axis from -1 to 1 is divided into
NRough + 2 equally spaced partitions, which determine the weights in
the averaging process.  More precisely, the model assumes the
arithmetic average of QCSQ(i) and QCSQ(i+1) at the interface, and the
weights govern how far the value of QCSQ in a microslab is from the
arithmetic average.  The NRough + 1 unknown weights w_tanh range from
-(1-1/(NRough+1)) through 1-1/(NRough+1).  We know at the middle of the
layers QCSQ(z) = QCSQ(i), implying the weights are +/-1.  This occurs
at x = +/-infinity.  In this sense, all our layers are considered
"infinitely thick" in the small roughness model.  For the erf model,
the weights are given by w_erf = erf(2 * arctanh(w_tanh)).

The nominal x values are given by x = 2 * arctanh(w_tanh).  These are
rescaled by dividing by CT = 2.292 for the tanh model and CE = 1.665
for the erf model, and are subsequently scaled by RO(i).  The value of
ztot is given by 2 * ztot = 3 * X_1 - X_3 where the X_i are rescaled
versions of the nominal x_i in which tanh(x_i / 2) = 1 - i / (NRough + 1).
Well, almost.  This is the formula for ztot in the criteria to select
models, but not always the one displayed by VE.  The displayed ztot is
actually the scaled thickness of the vacuum gradation, and agrees with
this calculation for odd NRough.  However, for even NRough the ztot
displayed by VE has underestimated x_3 by 2 * arctanh(2/(NRough + 1)),
and hence is too large.

The magic constants CT and CE are derived from the derivatives of the
profiles in the "large" roughness model.  In these models we have
weight given by erf(CE * z / RO) or tanh(CT * z / RO).  We start first
with CE, used in the erf model.

Let g(x) be the derivative of erf(x), scaled to unity at x = 0.
Simply, g = exp(-x*x).  Erf(x) is the integral of 2/sqrt(Pi)*exp(-x*x).
CE satisfies 1/2 = g(CE/2).  CE = 2 * sqrt(ln(2)).  So for the erf
model, CE represents the full width at one-half maximum.

Let G(x) be the derivative of tanh(x).  It is already scaled to unity
at x = 0.  CT satisfies 1/3 = G(CT/2).  CT = 2 * arctanh(sqrt(2/3)).
So for the tanh model, CT represents the full width at one-third
maximum.

A further problem exists with existing versions of GJ2/MLAYER.  For the
tanh model with large roughness, the RO parameters correspond to the
full-width at one-third maximum (FWTM) as described.  For the small
roughness case, an design error in calculating the partitions maps the
RO parameters to the half-width at one-third maximum (HWTM).  Thus the
tanh model should be avoided because the meaning of RO can change
during the fit.

2003-01-17}
