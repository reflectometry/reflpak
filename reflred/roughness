Here is a stab at a summary of how the RO parameters in GJ2/MLAYER
affect the programs.  It is a complicated and confusing matter, indeed,
but please bear with me and ask lots of questions about the info.
We all will learn as a result.

The old criteria of "make sure RO(i) < D(i) and RO(i) < D(i+1)" isn't
adequate, because the number of rough layers NRough affects John's
algorithm for roughing the interface.

GJ2/MLAYER now lists a parameter ztot on the NRough line.  When you
select the profile with PR, the program creates a standard profile y(x)
(erf or tanh) whose x-axis is a rescaled depth.  The parameter ztot is
a measure of the total thickness of this rescaled depth.  When the
program uses the profile to rough an interface i in your structure, it
scales the x-axis by RO(i).  See the Appendix for details of how ztot
is computed.

You cannot modify ztot, except by modifying NRough.  Ztot * RO(1) is
also the extra thickness added to your profile for the vacuum
gradation.  Your nominal structure starts this far deep into the
profile when you run commands like PLP.

We care about ztot because it is part of the criteria used to implement
two different ways of roughing the interface.  For small roughness, the
contribution to QCSQ and MU in the roughed layers comes only from the
layers on either side of the interface.  For large roughness, QCSQ and
MU in the layer depend on the values given for the layer and the one
above and below.  But, with exceedingly large roughness and small
thickness, the contribution from two layers away may be significant.  But
they will never be taken into account, unless you add a layer with
indeterminate QCSQ and MU.

For small roughness, your profile y(x) is divided into NRough + 1
(more or less) equally-spaced segments in y; the thickness of the
microslab varies accordingly (y is equally spaced for tanh).  When
large roughness is in effect, the NRough + 1 microslabs are equally
thick, and the profile y(x) varies accordingly.

The criteria which selects "small" is the following:

   D(i) > ztot * (RO(i) + RO(i+1))

"Large" is that which is not small.

Layers always extend from the middle of interface i to the middle of
interface i + 1.  We can get into problems when layers of dramatically
different roughness are adjacent to layers of dramatically different
thickness.  We could get the situation in which a "small" layer is
adjacent to a "large" layer.  In this case, we can get discontinous
jumps in both the magnitude and the slope of the profile.

Jumps in magnitude occur because a different rescaled x is being used
just at either side of the interface and the number of layers involved
at the interface changes.  Although significant contribution from layer
(i+2) may exist for the interface, the thickness of layer i selects a
"small" roughness model in which (i+2) plays no part.

Be advised that in GJ2 the magnetic and chemical profiles have
logically distinct roughness and thickness parameters.  They are
unified into a structure with common microslabs.  In the course of
doing this unification, a further averaging of the profile takes place
between the neighboring microslabs of the individual magnetic and
chemical profiles.  This may prevent the profile from ever reaching the
saturation value displayed by the VE command.  The error increases as
NRough decreases.  This unification is also the reason why RO(1) must
equal RM(1), otherwise the vacuum gradations will be of different
thickness, and the nominal magnetic structure will start at a different
depth from the nominal chemical structure.

In summary, if you keep D(i) > ztot * (RO(i) + RO(i+1)) for all i, the
small model will always apply, and the resulting profile will be
totally consistent.  As an aside, I have needed to implement linear
gradations through some very thick layers.  I achieved this by dividing
the very thick layer into three or more sublayers and using a tanh
profile in which RO(i) = 1.25 * D(i) for the inner sublayers, putting
us in the "large" roughness regime.  Roughness for the outer sublayers
is reduced to promote a controlled transition between "large" and
"small" models.

Appendix: Calculation of ztot

The ztot parameter is derived from the parameters of the "small"
roughness model.  All the small roughness calculations are based on the
tanh profile; the parameters for the erf profile are derived from key
features of the tanh profile.

In this appendix, I'll be speaking of the profile y(x), and I'll use
"vertical" to refer to the y axis and "horizontal" to refer to the x axis
(which is a re-scaled depth into the sample: z = RO(i) * x).

In the tanh model, the vertical axis from -1 to 1 is divided into
NRough + 2 equally spaced partitions, which determine the weights in
the averaging process.  More precisely, the model assumes the
arithmetic average of QCSQ(i) and QCSQ(i+1) at the interface, and the
weights govern how far the value of QCSQ in a microslab is from the
arithmetic average.  The NRough + 1 unknown weights w_tanh range from
-(1-1/(NRough+1)) through 1-1/(NRough+1).  We know at the middle of the
layers QCSQ(z) = QCSQ(i), implying the weights are +/-1.  This occurs
at x = +/-infinity.  In this sense, all our layers are considered
"infinitely thick" in the small roughness model.  For the erf model,
the weights are given by w_erf = erf(2 * arctanh(w_tanh)).

The nominal x values are given by x = 2 * arctanh(w_tanh).  These are
rescaled by dividing by CT = 2.292 for the tanh model and CE = 1.665
for the erf model, and are subsequently scaled by RO(i).  The value of
ztot is given by 2 * ztot = 3 * X_1 - X_3 where the X_i are rescaled
versions of the nominal x_i in which tanh(x_i / 2) = 1 - i / (NRough + 1).
Well, almost.  This is the formula for ztot in the criteria to select
models, but not always the one displayed by VE.  The displayed ztot is
actually the scaled thickness of the vacuum gradation, and agrees with
this calculation for odd NRough.  However, for even NRough the ztot
displayed by VE has underestimated x_3 by 2 * arctanh(2/(NRough + 1)),
and hence is too large.

The magic constants CT and CE are derived from the derivatives of the
profiles in the "large" roughness model.  In these models we have
weight given by erf(CE * z / RO) or tanh(CT * z / RO).  We start first
with CE, used in the erf model.

Let g(x) be the derivative of erf(x), scaled to unity at x = 0.
Simply, g = exp(-x*x).  Erf(x) is the integral of 2/sqrt(Pi)*exp(-x*x).
CE satisfies 1/2 = g(CE/2).  CE = 2 * sqrt(ln(2)).  So for the erf
model, CE represents the full width at one-half maximum.

Let G(x) be the derivative of tanh(x).  It is already scaled to unity
at x = 0.  CT satisfies 1/3 = G(CT/2).  CT = 2 * arctanh(sqrt(2/3)).
So for the tanh model, CT represents the full width at one-third
maximum.

A further problem exists with existing versions of GJ2/MLAYER.  For the
tanh model with large roughness, the RO parameters correspond to the
full-width at one-third maximum (FWTM) as described.  For the small
roughness case, an design error in calculating the partitions maps the
RO parameters to the half-width at one-third maximum (HWTM).  Thus the
tanh model should be avoided because the meaning of RO can change
during the fit.

